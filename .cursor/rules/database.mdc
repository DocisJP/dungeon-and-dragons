---
description: Database Settings and Scripts currently run
globs: 
alwaysApply: false
---
-- Script SQL completo para configurar Supabase para la aplicación de hojas de personaje D&D

-- 1. Crear tabla para almacenar personajes
CREATE TABLE characters (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  character_data JSONB NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Crear índices para mejorar rendimiento
CREATE INDEX characters_user_id_idx ON characters(user_id);
CREATE INDEX characters_name_idx ON characters(name);

-- 3. Configurar trigger para actualizar el timestamp de updated_at automáticamente
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_characters_timestamp
BEFORE UPDATE ON characters
FOR EACH ROW
EXECUTE PROCEDURE update_modified_column();

-- 4. Configurar RLS (Row Level Security) para la tabla characters
-- Primero habilitamos RLS en la tabla
ALTER TABLE characters ENABLE ROW LEVEL SECURITY;

-- 5. Crear políticas de seguridad para la tabla characters

-- Política para SELECT: un usuario solo puede ver sus propios personajes
CREATE POLICY "Users can view their own characters" 
ON characters 
FOR SELECT 
USING (auth.uid() = user_id);

-- Política para INSERT: un usuario solo puede insertar personajes asociados a su ID
CREATE POLICY "Users can insert their own characters" 
ON characters 
FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Política para UPDATE: un usuario solo puede actualizar sus propios personajes
CREATE POLICY "Users can update their own characters" 
ON characters 
FOR UPDATE 
USING (auth.uid() = user_id);

-- Política para DELETE: un usuario solo puede eliminar sus propios personajes
CREATE POLICY "Users can delete their own characters" 
ON characters 
FOR DELETE 
USING (auth.uid() = user_id);

-- 6. Configurar un bucket para almacenar posibles imágenes de personajes (opcional)
-- Esto se hace generalmente desde la interfaz de Supabase, pero aquí está el SQL:

-- INSERT INTO storage.buckets (id, name)
-- VALUES ('character-images', 'Character Images');

-- Establecer políticas RLS para el bucket de imágenes (opcional)
-- CREATE POLICY "Users can view all character images"
-- ON storage.objects FOR SELECT
-- USING (bucket_id = 'character-images');

-- CREATE POLICY "Users can upload their own character images"
-- ON storage.objects FOR INSERT
-- WITH CHECK (
--   bucket_id = 'character-images' AND
--   auth.uid() = (storage.foldername(name))[1]::uuid
-- );

-- 7. Establecer valores predeterminados y restricciones
ALTER TABLE characters 
  ALTER COLUMN character_data SET DEFAULT '{}',
  ADD CONSTRAINT character_data_not_empty CHECK (character_data != 'null'::jsonb);

-- 8. Función para compartir personajes entre usuarios (opcional - funcionalidad futura)
-- CREATE TABLE character_shares (
--   id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
--   character_id UUID NOT NULL REFERENCES characters(id) ON DELETE CASCADE,
--   owner_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
--   shared_with_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
--   can_edit BOOLEAN DEFAULT FALSE,
--   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-- );

-- ALTER TABLE character_shares ENABLE ROW LEVEL SECURITY;

-- CREATE POLICY "Users can view their shared characters"
-- ON character_shares FOR SELECT
-- USING (auth.uid() = shared_with_id OR auth.uid() = owner_id);

-- CREATE POLICY "Only owners can share characters"
-- ON character_shares FOR INSERT
-- WITH CHECK (auth.uid() = owner_id);

-- CREATE POLICY "Only owners can delete shares"
-- ON character_shares FOR DELETE
-- USING (auth.uid() = owner_id);

-- Y una vista para facilitar el acceso a los personajes compartidos:
-- CREATE VIEW accessible_characters AS
-- SELECT c.*, 
--        CASE WHEN c.user_id = auth.uid() THEN true ELSE false END as is_owner,
--        CASE WHEN cs.can_edit IS NOT NULL THEN cs.can_edit ELSE false END as can_edit
-- FROM characters c
-- LEFT JOIN character_shares cs ON c.id = cs.character_id AND cs.shared_with_id = auth.uid()
-- WHERE c.user_id = auth.uid() OR cs.id IS NOT NULL;